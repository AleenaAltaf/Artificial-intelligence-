# Lab 2: Iterative Structures in Python

# While Loop Example
count = 0
while count < 3:
    count += 1
    print("Hello Geek")

# Single-statement While Loop
count = 0
while count == 0: print("Hello Geek")

# For Loop: Iterating Over a List
print("List Iteration")
l = ["geeks", "for", "geeks"]
for i in l:
    print(i)

# For Loop: Iterating Over a Tuple
print("\nTuple Iteration")
t = ("geeks", "for", "geeks")
for i in t:
    print(i)

# For Loop: Iterating Over a String
print("\nString Iteration")
s = "Geeks"
for i in s:
    print(i)

# For Loop: Iterating by Index
list_items = ["geeks", "for", "geeks"]
for index in range(len(list_items)):
    print(list_items[index])

# Continue Statement: Skipping 'e' and 's'
for letter in 'geeksforgeeks':
    if letter == 'e' or letter == 's':
        continue
    print("Current Letter:", letter)

# Break Statement: Stopping at 'e' or 's'
for letter in 'geeksforgeeks':
    if letter == 'e' or letter == 's':
        break
    print("Current Letter:", letter)

# Function Example
def my_function():
    print("Hello from a function")

my_function()

# Function with Parameters
def my_function(fname):
    print(fname + " Refsnes")

my_function("Emil")
my_function("Tobias")
my_function("Linus")

# Function with Default Parameter
def my_function(country="Norway"):
    print("I am from " + country)

my_function("Sweden")
my_function("India")
my_function()
my_function("Brazil")

# Function with List Parameter
def my_function(food):
    for x in food:
        print(x)

fruits = ["apple", "banana", "cherry"]
my_function(fruits)

# Function with Return Value
def my_function(x):
    return 5 * x

print(my_function(3))
print(my_function(5))
print(my_function(9))

# Function with Keyword Arguments
def my_function(child3, child2, child1):
    print("The youngest child is " + child3)

my_function(child1="Emil", child2="Tobias", child3="Linus")

# Class and Object Example
class MyClass:
    x = 5

p1 = MyClass()
print(p1.x)

# Class with _init_() Method
class Person:
    def _init_(self, name, age):
        self.name = name
        self.age = age

p1 = Person("John", 36)
print(p1.name)
print(p1.age)

# Class with Method
class Person:
    def _init_(self, name, age):
        self.name = name
        self.age = age

    def myfunc(self):
        print("Hello my name is " + self.name)

p1 = Person("John", 36)
p1.myfunc()